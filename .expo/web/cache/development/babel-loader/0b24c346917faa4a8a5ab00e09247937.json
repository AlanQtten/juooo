{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    count: 0,\n    count1: 0,\n    lists: [],\n    loading: false\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"INCREASE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    case \"DECREASE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count1: state.count1 - 1\n      });\n\n    case \"GETLISTS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lists: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["E:/sh_0610/react-native-expo/expo-demo/reducers/count.js"],"names":["reducer","state","count","count1","lists","loading","action","type","payload"],"mappings":";;;;;;AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAU,GAGX;AAAA,MAFHC,KAEG,uEAFK;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE,CAApB;AAAuBC,IAAAA,KAAK,EAAE,EAA9B;AAAkCC,IAAAA,OAAO,EAAE;AAA3C,GAEL;AAAA,MADHC,MACG;;AAEH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AAKE,6CAAYN,KAAZ;AAAmBC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAxC;;AACF,SAAK,UAAL;AAGE,6CAAYD,KAAZ;AAAmBE,QAAAA,MAAM,EAAEF,KAAK,CAACE,MAAN,GAAe;AAA1C;;AAEF,SAAK,UAAL;AACE,6CAAYF,KAAZ;AAAmBG,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAAjC;;AACF;AACE,aAAOP,KAAP;AAfJ;AAiBD,CAtBD;;AAwBA,eAAeD,OAAf","sourcesContent":["const reducer = (\r\n  state = { count: 0, count1: 0, lists: [], loading: false },\r\n  action\r\n) => {\r\n  // action附带type，payload\r\n  switch (action.type) {\r\n    case \"INCREASE\":\r\n      // state只读，需要纯函数修改，但我们不知道什么函数是纯函数，所以需要将原来的对象进行拷贝\r\n\r\n      // return {count: state.count + 1};\r\n      // return Object.assign({}, state, { count: state.count + 1 });\r\n      return { ...state, count: state.count + 1 };\r\n    case \"DECREASE\":\r\n      // return {count1: state.count1 - 1};\r\n      // return Object.assign({}, state, { count1: state.count1 - 1 });\r\n      return { ...state, count1: state.count1 - 1 };\r\n\r\n    case \"GETLISTS\":\r\n      return { ...state, lists: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}